{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>This page is written in the from of a \"note to self\" on Python libraries of interest, development best practices, and tips and tricks in general on one way to go about doing Python development.</p> <p>If you're just starting with development, you should visit the Environment page, where I try to give a few tips on how to create a good coding environment.</p> <p>There's some material to:</p> <ul> <li>learn Git;</li> <li>get a descent IDE (Integrated Development Environment);</li> <li>install a proper shell.</li> </ul>"},{"location":"cloud/","title":"Overview","text":"<p>This part is a general overview of everything you need to get a Linux server up and running, using a Raspberry Pi as the motivating example.</p>"},{"location":"cloud/installation/","title":"Setting up your server","text":"<p>Although this guide was written with the specific case of a Raspberry Pi, it will work with any Linux server.</p>"},{"location":"cloud/installation/#creating-a-bootable-usb","title":"Creating a bootable USB","text":"<p>Download a distribution image. Use Balena-Etcher or the RaspberryPi Imager to create a bootable USB.</p> <p>I lean towards the Ubuntu distribution rather than the Raspbian one, for no particular reason other than the fact that you're in good company with Ubuntu. You can follow the official Ubuntu tutorial (recommended whatever the distribution you end up choosing).</p> <p>Make sure to enable ssh ! On the bootable medium :</p> <pre><code>touch ssh\n</code></pre> <p>Set up the wifi (you can skip this step if you intend to connect your Raspberry with ethernet) :</p> <pre><code>wifis:\n# Wifi configuration, here with dynamic IP\nwlan0:\ndhcp4: true\noptional: true\naccess-points:\n\"home network\":\npassword: \"123456789\"\n</code></pre> <p>Insert the SD card and let the Raspberry boot. Provided the RPi is connected to the network, you should be able to access is via SSH :</p> <pre><code>ssh ubuntu@&lt;IP-address&gt;\n</code></pre>"},{"location":"cloud/installation/#creating-a-user","title":"Creating a user","text":"<p>You should immediately create a new user, and delete the default <code>ubuntu</code> user.</p> <pre><code># Create the user\nsudo adduser newuser\n# Give it superuser rights\nsudo usermod -aG sudo newuser\n</code></pre> <p>Reconnect on your RPi using the new user, and delete <code>ubuntu</code>:</p> <pre><code>sudo userdel -r ubuntu\n</code></pre>"},{"location":"cloud/installation/#configuration","title":"Configuration","text":""},{"location":"cloud/installation/#install-zsh","title":"Install Zsh","text":"<p>Zsh is an alternative to Bash, and provides a myriad of bonuses. Follow the instructions.</p>"},{"location":"cloud/installation/#install-oh-my-zsh","title":"Install oh-my-zsh","text":"<p>oh-my-zsh is a package manager for Zsh. It can help you customize your shell with incredibly useful perks. Follow the instructions.</p>"},{"location":"cloud/installation/#install-spaceship-prompt","title":"Install spaceship-prompt","text":"<p>There are other prompts out there, but Spaceship is a good way to start. Follow the instructions.</p>"},{"location":"cloud/installation/#install-micro","title":"Install micro","text":"<p>Micro is a great terminal-based file editor. To install it, run :</p> <pre><code>curl https://getmic.ro | bash\n</code></pre> <p>Then put the executable in a usable folder :</p> <pre><code># Create a .local/bin folder\nmkdir -p .local/bin\n# Move the executable to the new folder\nmv micro .local/bin\n</code></pre> <p><code>.local/bin</code> is added to the path in the following step.</p>"},{"location":"cloud/installation/#configure-zsh","title":"Configure Zsh","text":"<p>Modify you <code>.zshrc</code> to configure your new shell.</p> <pre><code>.local/bin/micro .zshrc\n</code></pre> <p>You may use this configuration. You'll need to install <code>zsh-syntax-highlighting</code> if you do (see instructions).</p>"},{"location":"cloud/installation/#generate-a-ssh-key","title":"Generate a SSH key","text":"<p>See the instructions from Github.</p> <pre><code>ssh-keygen -t ed25519 -C \"your_email@example.com\"\n</code></pre> <p>Display your public kwy with :</p> <pre><code>cat .ssh/id_ed25519.pub\n</code></pre> <p>This will be useful to add to your Github account, for example.</p>"},{"location":"cloud/installation/#docker","title":"Docker","text":"<p>See instructions. And the other instructions, to enable <code>docker</code> without <code>sudo</code>.</p> <p>Then, install <code>docker-compose</code> through <code>pip</code> :</p> <pre><code>pip install docker-compose\n</code></pre> <p>You may need to reinstall Python :</p> <pre><code>sudo apt install python3-pip\n</code></pre>"},{"location":"cloud/ip-address/","title":"IP Address","text":"<p>Example configuration to reserve a static address :</p> <pre><code>network:\nversion: 2\nrenderer: networkd\nethernets:\neth0:\naddresses:\n# The address you'd like to reserve\n- 192.168.0.12/24\n# The address of the router\ngateway4: 192.168.0.1\nnameservers:\naddresses:\n# I just copied this from the router...\n- 8.8.8.8\n</code></pre>"},{"location":"cloud/proxy/","title":"Reverse Proxy Server","text":""},{"location":"cloud/proxy/#what-is-a-reverse-proxy-server","title":"What is a reverse proxy server?","text":"<p>The reverse proxy server is the gateway to your server. Every request made to your server will be routed to the proxy, which will dispatch them to the relevant service.</p> <p>For instance, my server hosts multiple websites located on different domain, but all point to a single server, which analyse the domain that was requested, and passes the request on to the service that's dedicated to that domain.</p>"},{"location":"cloud/proxy/#what-should-i-use","title":"What should I use?","text":"<p>There are a few options: Traefik, NGINX, Apache..</p> <p>Use Traefik: it's very simple to set up, incredibly customisable, formidably powerful... You won't regret it.</p>"},{"location":"cloud/proxy/#example-config","title":"Example config","text":"<p>See the docker-compose file :</p> <pre><code>version: \"3.3\"\nservices:\ntraefik:\n# Use the latest v2.6.x Traefik image available\nimage: traefik:v2.9\nrestart: unless-stopped\nports:\n# Listen on port 80, default for HTTP, necessary to redirect to HTTPS\n- 80:80\n# Listen on port 443, default for HTTPS\n- 443:443\ndeploy:\nplacement:\nconstraints:\n# Make the traefik service run only on the node with this label\n# as the node with it has the volume for the certificates\n- node.labels.traefik-public.traefik-public-certificates == true\nlabels:\n# Enable Traefik for this service, to make it available in the public network\n- traefik.enable=true\n# Use the traefik-public network (declared below)\n- traefik.docker.network=traefik-public\n# Use the custom label \"traefik.constraint-label=traefik-public\"\n# This public Traefik will only use services with this label\n# That way you can add other internal Traefik instances per stack if needed\n- traefik.constraint-label=traefik-public\n# admin-auth middleware with HTTP Basic auth\n# Using the environment variables USERNAME and HASHED_PASSWORD\n# https-redirect middleware to redirect HTTP to HTTPS\n# It can be re-used by other stacks in other Docker Compose files\n# - traefik.http.middlewares.https-redirect.redirectscheme.scheme=https\n# - traefik.http.middlewares.https-redirect.redirectscheme.permanent=true\n# traefik-http set up only to use the middleware to redirect to https\n# Redirect all traffic on http to https \n# (see https://community.traefik.io/t/a-global-http-https-redirection/864/3)\n# - traefik.http.routers.http-catchall.rule=HostRegex(`{host:.+}`)\n# - traefik.http.routers.http-catchall.entrypoints=http\n# - traefik.http.routers.http-catchall.middlewares=https-redirect\n# - traefik.http.routers.http-catchall.service=api@internal\n# traefik-https the actual router using HTTPS\n# Uses the environment variable DOMAIN\n- traefik.http.routers.traefik-public-https.rule=Host(`${DOMAIN?Variable not set}`)\n- traefik.http.routers.traefik-public-https.entrypoints=https\n- traefik.http.routers.traefik-public-https.tls=true\n# Use the special Traefik service api@internal with the web UI/Dashboard\n- traefik.http.routers.traefik-public-https.service=api@internal\n# Use the \"le\" (Let's Encrypt) resolver created below\n- traefik.http.routers.traefik-public-https.tls.certresolver=letsencrypt\n# Enable HTTP Basic auth, using the middleware created above\n- traefik.http.routers.traefik-public-https.middlewares=admin-auth@file\n# Define the port inside of the Docker service to use\n- traefik.http.services.traefik-public.loadbalancer.server.port=8080\nvolumes:\n# Add Docker as a mounted volume, so that Traefik can read the labels of other services\n- /var/run/docker.sock:/var/run/docker.sock:ro\n# Mount the volume to store the certificates\n- traefik-public-certificates:/certificates\n- ./config:/etc/traefik/config\n- ./traefik.yml:/etc/traefik/traefik.yml\nnetworks:\n# Use the public network created to be shared between Traefik and\n# any other service that needs to be publicly available with HTTPS\n- traefik-public\nvolumes:\n# Create a volume to store the certificates, there is a constraint to make sure\n# Traefik is always deployed to the same Docker node with the same volume containing\n# the HTTPS certificates\ntraefik-public-certificates:\nnetworks:\n# Use the previously created public network \"traefik-public\", shared with other\n# services that need to be publicly available via this Traefik\ntraefik-public:\nexternal: true\n</code></pre> <p>And the traefik configuration :</p> <pre><code>global:\nsendAnonymousUsage: false\nlog:\nlevel: \"INFO\"\nformat: \"common\"\naccessLog: {}\nmetrics:\nprometheus: {}\nproviders:\ndocker:\nendpoint: \"unix:///var/run/docker.sock\"\nexposedByDefault: false\nconstraints: Label(`traefik.constraint-label`, `traefik-public`)\nswarmMode: false\nwatch: true\nfile:\ndirectory: /etc/traefik/config\nwatch: true\napi:\ndashboard: true\ndebug: true\nentryPoints:\nhttp:\naddress: \":80\"\nhttps:\naddress: \":443\"\ncertificatesResolvers:\nletsencrypt:\nacme:\nemail: \"basile+letsencrypt@bdura.me\"\nstorage: \"/certificates/acme.json\"\ntlsChallenge: {}\n</code></pre> <p>I was able to score an A score on SSL Labs using this configuration :</p> <pre><code>tls:\noptions:\ndefault:\nminVersion: VersionTLS12\ncipherSuites:\n- TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\n- TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\n- TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305\n- TLS_AES_128_GCM_SHA256\n- TLS_AES_256_GCM_SHA384\n- TLS_CHACHA20_POLY1305_SHA256\ncurvePreferences:\n- CurveP521\n- CurveP384\nsniStrict: true\n</code></pre>"},{"location":"cloud/reading-list/","title":"Reading list","text":""},{"location":"cloud/reading-list/#administration","title":"Administration","text":"<ul> <li>ACME-companion</li> </ul>"},{"location":"cloud/reading-list/#messaging","title":"Messaging","text":""},{"location":"cloud/reading-list/#emails","title":"Emails","text":"<ul> <li>Docker-Mailserver. Read the author's [manifesto](https://tvi.al/simple-mail-server-with-docker/</li> </ul>"},{"location":"cloud/reading-list/#instant-messaging","title":"Instant messaging","text":"<ul> <li>Mattermost</li> <li>Zulip</li> <li>Matrix.org, element</li> </ul>"},{"location":"cloud/reading-list/#multimedia","title":"Multimedia","text":"<ul> <li>Emby</li> <li>Spotify clone ?</li> <li>Plex</li> </ul>"},{"location":"cloud/reading-list/#websites","title":"Websites","text":"<ul> <li>A very lightweight (&lt;4MB image !) static file server</li> </ul>"},{"location":"cloud/reading-list/#home-automation","title":"Home automation","text":"<ul> <li>OpenHAB</li> </ul>"},{"location":"cloud/reading-list/#coding","title":"Coding","text":"<ul> <li>VS Code Server and the great tutorial to use on iPad.</li> </ul>"},{"location":"cloud/reading-list/#network-administration","title":"Network administration","text":""},{"location":"cloud/reading-list/#ad-blocking","title":"Ad blocking","text":"<ul> <li>blocky</li> <li>AdGuard</li> </ul>"},{"location":"development/","title":"Development","text":""},{"location":"development/changelog/","title":"Changelog","text":""},{"location":"development/changelog/#v010-2022-04-20","title":"v0.1.0 - 2022-04-20","text":""},{"location":"development/changelog/#added","title":"Added","text":"<ul> <li>Raspberry Pi setup instructions</li> <li>Decent documentation</li> </ul>"},{"location":"environment/","title":"Coding environment","text":"<p>To code efficiently, you'll need a good coding environment. This section proposes a set of tools that should make your life much easier.</p> <p>By the way, you should really learn Markdown.</p>"},{"location":"environment/git/","title":"Using and configuring Git","text":"<p>Skip if you're familiar</p> <p>This is rather basic stuff. If you know all about Git and SSH keys, you should definitely skip this section.</p> <p>Git is an ubiquitous versioning tool that was created by Linus Tovalds, the creator of the Linux operating system. With git, you can version your code, meaning that you can take \"pictures\" of your code and modify it incrementally. Git is also design to help you collaborate.</p> <p>If this is too abstract, which it probably is, read the Primer below.</p>"},{"location":"environment/git/#git-primer","title":"Git Primer","text":"<p>If you're absolutely new to Git, find a tutorial and come back to this page. This might be a good way to start (I haven't done it myself).</p>"},{"location":"environment/git/#using-an-ssh-key","title":"Using an SSH key","text":"<p>Security concerns</p> <p>You should use SSH keys whenever possible, to avoid compromising your password. If your SSH key is compromised, you can invalidate it and create a new one.</p>"},{"location":"environment/ide/","title":"Integrated Development Environment","text":"<p>A good Integrated Development Environment (IDE) is important. I've used two: PyCharm and VS Code, both great options.</p> <p>I would advise to use VS Code. It is lightweight, fast, ships with a load of incredible goodies and has an extension for about everything.</p> <p>Make sure to activate auto-saving. Go to <code>Settings</code> and search for <code>auto save</code> and select <code>afterDelay</code>.</p>"},{"location":"environment/ide/#extensions","title":"Extensions","text":"<p>Installing extensions</p> <p>To install an extension in VS Code, just go to to the extensions panel (should be the last button on the left of your VS Code window), search for an extension, and click \"Install\". See the official instructions.</p> <p>A few extensions that will help you code faster than ever:</p> <ul> <li>Pylance and Python: a language server for Python</li> <li>Prettier: a great code formatter</li> <li>Jupyter: Jupyter support within VS Code</li> <li>Gitlens: Git supercharged</li> <li>Auto docstrings: automatically generate docstrings.</li> <li>Coverage Gutters: display test coverage</li> <li>YAML: YAML syntax highlighting</li> <li>Better TOML: TOML syntax highlighting</li> <li>SQLTools: explore an SQL database from VS Code</li> <li>Thunder Client: test REST API from VS Code</li> <li>Todo Tree: highlight todos and checklists</li> <li>Conventional commits: help you use conventional commits</li> <li>Markdown all in one: supercharge your markdown editor</li> <li>Markdown PDF: save your markdowns to PDF</li> <li>Marp for VS Code: create stunning presentations in markdown</li> </ul> <p>When coding in Python, make sure to activate auto-saving, formatting on save with Black, and type checking with mypy.</p>"},{"location":"environment/zsh/","title":"Using a Decent Shell","text":"<p>Most distributions come with the Bourne Again Shell (bash). You can do better by using Zsh, an alternative to Bash that provides a myriad of bonuses.</p>"},{"location":"environment/zsh/#primer-on-the-command-line","title":"Primer on the Command Line","text":"<p>If this your first time using the command line, you should probably read this primer by Ubuntu.</p> <p>Although the tutorial is designed for Ubuntu users, you can follow along with any Linux or Mac computer. On PC, you'll need the Windows Subsystem for Linux. I have never done this since I do not own a PC, but I know this is a popular set up among developers using PC.</p>"},{"location":"environment/zsh/#zsh","title":"Zsh","text":""},{"location":"environment/zsh/#installation","title":"Installation","text":"<p>Follow the instructions.</p>"},{"location":"environment/zsh/#install-oh-my-zsh","title":"Install oh-my-zsh","text":"<p>oh-my-zsh is a package manager for Zsh. It can help you customize your shell with incredibly useful perks. Follow the instructions.</p>"},{"location":"environment/zsh/#install-spaceship-prompt","title":"Install spaceship-prompt","text":"<p>There are other prompts out there, but Spaceship is a good way to start. Follow the instructions.</p>"},{"location":"environment/zsh/#configuring-your-shell","title":"Configuring your shell","text":"<p>The following <code>.zshrc</code> should be a good place to start.</p> ~/.zshrc<pre><code># If you come from bash you might have to change your $PATH.\n# export PATH=$HOME/bin:/usr/local/bin:$PATH\n# Path to your oh-my-zsh installation.\nexport ZSH=\"$HOME/.oh-my-zsh\"\n# Set name of the theme to load --- if set to \"random\", it will\n# load a random theme each time oh-my-zsh is loaded, in which case,\n# to know which specific one was loaded, run: echo $RANDOM_THEME\n# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes\nZSH_THEME=\"spaceship\"\nSPACESHIP_USER_SHOW=\"always\"\nSPACESHIP_CHAR_SYMBOL=\" \u279c \"\n# Set list of themes to pick from when loading at random\n# Setting this variable when ZSH_THEME=random will cause zsh to load\n# a theme from this variable instead of looking in $ZSH/themes/\n# If set to an empty array, this variable will have no effect.\n# ZSH_THEME_RANDOM_CANDIDATES=( \"robbyrussell\" \"agnoster\" )\n# Uncomment the following line to use case-sensitive completion.\n# CASE_SENSITIVE=\"true\"\n# Uncomment the following line to use hyphen-insensitive completion.\n# Case-sensitive completion must be off. _ and - will be interchangeable.\n# HYPHEN_INSENSITIVE=\"true\"\n# Uncomment the following line to disable bi-weekly auto-update checks.\n# DISABLE_AUTO_UPDATE=\"true\"\n# Uncomment the following line to automatically update without prompting.\n# DISABLE_UPDATE_PROMPT=\"true\"\n# Uncomment the following line to change how often to auto-update (in days).\n# export UPDATE_ZSH_DAYS=13\n# Uncomment the following line if pasting URLs and other text is messed up.\n# DISABLE_MAGIC_FUNCTIONS=\"true\"\n# Uncomment the following line to disable colors in ls.\n# DISABLE_LS_COLORS=\"true\"\n# Uncomment the following line to disable auto-setting terminal title.\n# DISABLE_AUTO_TITLE=\"true\"\n# Uncomment the following line to enable command auto-correction.\n# ENABLE_CORRECTION=\"true\"\n# Uncomment the following line to display red dots whilst waiting for completion.\n# Caution: this setting can cause issues with multiline prompts (zsh 5.7.1 and newer seem to work)\n# See https://github.com/ohmyzsh/ohmyzsh/issues/5765\n# COMPLETION_WAITING_DOTS=\"true\"\n# Uncomment the following line if you want to disable marking untracked files\n# under VCS as dirty. This makes repository status check for large repositories\n# much, much faster.\n# DISABLE_UNTRACKED_FILES_DIRTY=\"true\"\n# Uncomment the following line if you want to change the command execution time\n# stamp shown in the history command output.\n# You can set one of the optional three formats:\n# \"mm/dd/yyyy\"|\"dd.mm.yyyy\"|\"yyyy-mm-dd\"\n# or set a custom format using the strftime function format specifications,\n# see 'man strftime' for details.\n# HIST_STAMPS=\"mm/dd/yyyy\"\n# Would you like to use another custom folder than $ZSH/custom?\n# ZSH_CUSTOM=/path/to/new-custom-folder\n# Which plugins would you like to load?\n# Standard plugins can be found in $ZSH/plugins/\n# Custom plugins may be added to $ZSH_CUSTOM/plugins/\n# Example format: plugins=(rails git textmate ruby lighthouse)\n# Add wisely, as too many plugins slow down shell startup.\nplugins=(\ngit\nzsh-syntax-highlighting\n)\nsource $ZSH/oh-my-zsh.sh\n\n# User configuration\nexport PATH=\"$HOME/.local/bin:$PATH\"\n# export MANPATH=\"/usr/local/man:$MANPATH\"\n# You may need to manually set your language environment\n# export LANG=en_US.UTF-8\n# Preferred editor for local and remote sessions\n# if [[ -n $SSH_CONNECTION ]]; then\n#   export EDITOR='vim'\n# else\n#   export EDITOR='mvim'\n# fi\n# Compilation flags\n# export ARCHFLAGS=\"-arch x86_64\"\n# Set personal aliases, overriding those provided by oh-my-zsh libs,\n# plugins, and themes. Aliases can be placed here, though oh-my-zsh\n# users are encouraged to define aliases within the ZSH_CUSTOM folder.\n# For a full list of active aliases, run `alias`.\n# Example aliases\nalias zshconfig=\"micro ~/.zshrc\"\nalias ohmyzsh=\"micro ~/.oh-my-zsh\"\nalias dc=\"docker-compose\"\n</code></pre>"},{"location":"python/","title":"Overview","text":"<p>This section deals with a few tips, tricks, and ideas about how to go about writing great code.</p> <p>The \"awesome\" section can be understood as a reading list of interesting packages for Python in general.</p>"},{"location":"python/#getting-started","title":"Getting started","text":"<p>Do not install Anaconda. Use miniconda instead: it installes the <code>conda</code> executable without all the malwares that ship with the full Anaconda suite. Besides, who needs such an ugly package installer?</p> <p>Installing miniconda is straightforward, just go to the dedicated page.</p>"},{"location":"python/awesome/","title":"Awesome Python","text":"<p>A curated list of delightful Data Science libraries and resources. For more awesomeness, check out awesome.</p> <p></p>"},{"location":"python/awesome/#reading-list","title":"Reading list","text":""},{"location":"python/awesome/#hitchikers-guide-to-python","title":"Hitchiker's Guide to Python","text":"<p>A great resource for Python best practices :</p> <ul> <li>idiomatic/pythonic expressions</li> <li>code structuring</li> <li>common libraries</li> </ul>"},{"location":"python/awesome/#ide","title":"IDE","text":"<p>VS Code is a great tool.</p> <p>A few extensions that will help you code faster than ever:</p> <ul> <li>Pylance and Python: a language server for Python</li> <li>Jupyter: Jupyter support within VS Code</li> <li>Gitlens: Git supercharged</li> <li>Auto docstrings: automatically generate docstrings.</li> <li>Coverage Gutters: display test coverage</li> <li>YAML: YAML syntax highlighting</li> <li>Better TOML: TOML syntax highlighting</li> <li>SQLTools: explore an SQL database from VS Code</li> <li>Thunder Client: test REST API from VS Code</li> <li>Todo Tree: highlight todos and checklists</li> <li>Conventional commits: help you use conventional commits</li> <li>Markdown all in one: supercharge your markdown editor</li> <li>Markdown PDF: save your markdowns to PDF</li> <li>Marp for VS Code: create stunning presentations in markdown</li> </ul>"},{"location":"python/awesome/#scripts","title":"Scripts","text":""},{"location":"python/awesome/#typer","title":"Typer","text":"<p>Type-hint-powered CLI for Python. A must-have.</p>"},{"location":"python/awesome/#testing-python-code","title":"Testing Python code","text":""},{"location":"python/awesome/#pytest","title":"Pytest","text":"<p>Pytest is a great library for testing Python code. You really should test your code, and start doing so from day one... You risk letting the workload overrun if you wait too long, testing legacy code is a hassle.</p> <p>With a well defined test-suite, you can refactor your code without having to worry that everything works: you know it does once the tests pass.</p>"},{"location":"python/awesome/#hypothesis","title":"Hypothesis","text":"<p>Hypothesis works with Pytest to automate unit-testing with random examples.</p>"},{"location":"python/awesome/#versioning","title":"Versioning","text":""},{"location":"python/awesome/#conventional-commits","title":"Conventional commits","text":"<p>Use conventional commits if you can, it make your git logs much more readable and human (as well as machine) friendly.</p>"},{"location":"python/awesome/#semantic-versioning","title":"Semantic Versioning","text":"<p>Use semantic versioning for your libraries.</p>"},{"location":"python/awesome/#poetry","title":"Poetry","text":"<p>Python dependency management and packaging made easy.</p> <p>Poetry simplifies the dependency management, and makes sure every member of the team is working with the same environment, limiting it works on my machine syndrome. You get a managed virtual environment for free, and packaging becomes easy as a breeze.</p>"},{"location":"python/awesome/#logging","title":"Logging","text":""},{"location":"python/awesome/#loguru","title":"Loguru","text":"<p>A most simple logging library. Removes some of the hassle of using the standard logging library, and goes above and beyond with support for :</p> <ul> <li>colored logging</li> <li>exception catching</li> <li>etc.</li> </ul>"},{"location":"python/awesome/#coding-with-style","title":"Coding with style","text":""},{"location":"python/awesome/#googles-style-guide","title":"Google's style guide","text":"<p>Take a look at this great style guide, it goes over many patterns.</p>"},{"location":"python/awesome/#black","title":"Black","text":"<p>Automatic formatting of your Python files that goes beyond PEP8 compliance. Your code will be neat and tidy, and uniform across your project regardless of the author. In a nutshell :</p> <p>Black reformats your files in place. It is not configurable.</p> <p>Also worth checking out :</p> <ul> <li>An incredible Jupyter extension for automatic Black formatting</li> </ul>"},{"location":"python/awesome/#pre-commit","title":"Pre-commit","text":"<p>Check and lint you code before committing, to make sure it remains pristine every time! See EDS-NLP's configuration for inspiration.</p> <p>You'll need to install it:</p> <pre><code># Install with pip\npip install pre-commit\n# Add the pre-commit hook\npre-commit install\n# Run on every files\npre-commit run --all-files\n</code></pre>"},{"location":"python/awesome/#a-great-intro-to-python-types","title":"A great intro to Python types","text":"<p>Python types, explained.</p>"},{"location":"python/awesome/#documentation","title":"Documentation","text":""},{"location":"python/awesome/#mkdocs","title":"MkDocs","text":"<p>Write beautiful and modern documentations. See EDS-NLP's documentation and configuration for inspiration.</p>"},{"location":"python/configuration/","title":"A powerful configuration system","text":"<p>Use TOML. It's easy to read yet powerful. It supports comments.</p> <p>One of spaCy's genius moves resides in their configuration system, that uses a format akin to TOML, with the added bonuses of variable interpolation and registry integration.</p>"},{"location":"python/documentation/","title":"Writing Documentation","text":"<p>Friends don't let friends write undocumented code.</p> <p>Use mkdocs. It powers this \"documentation\".</p> <p>Setting it up is simple enough :</p> <pre><code>$ mkdocs serve\ncolor:green Serving on http://127.0.0.1:8000/\n</code></pre>"},{"location":"python/reproducibility/","title":"Reproducible Science","text":"<p>Reproducibility is one of the keys to making great science.</p> <ul> <li>Seeding</li> <li>Poetry</li> <li>DVC</li> <li>Docker</li> </ul>"},{"location":"python/structure/","title":"Structuring Python Code","text":"<ul> <li>pre-commit</li> <li>poetry</li> <li><code>__init__.py</code></li> </ul> <p>A good first step : the Hitchiker's Guide to Python</p>"},{"location":"web/","title":"Web development","text":""}]}